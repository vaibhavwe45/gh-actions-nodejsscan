#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cut-the-funds:server');
var http = require('http');
const rl = require("readline-sync");
const conf = require("../config/config.dev");
const pbk = require("pbkdf2");
require("../db/db.js");
const mongoose = require("mongoose");
let User = mongoose.model("User")

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    console.log("Listening...")
    // Almost works
    // if (User.find()) {
    //     let email = rl.question("What's the SuperAdmin's Email? ");
    //     let firstName = rl.question("What's the SuperAdmin's First Name? ");
    //     let lastName = rl.question("What's the SuperAdmin's LastName? ");
    //     let username = rl.question("What's the SuperAdmin's username? ");
    //     let password = rl.question("What's the SuperAdmin's Password? ", { hideEchoBack: true });
    //
    //     let hashValue = pbk.pbkdf2Sync(password, conf.salt, 1, 32, 'sha512').toString('hex');
    //
    //     User.create({
    //         email: email,
    //         firstName: firstName,
    //         lastName: lastName,
    //         username: username,
    //         password: hashValue,
    //         isSuperAdmin: true
    //     })
    // }

  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
